
На python С помощью SQLAlchemy создать модели Post, Tag, Comment, Subscription для сайта "Мой блог" 
на тему "Комнатные цветы". Для пользователя использовать стандартную модель User. Также можешь 
создать другие модели, которые посчитаешь нужными
Установить связи между моделями.

В качестве примера ввести с помощью ORM некоторые данные две -три записи для пользвателей, 
на каждого по три - четыре поста c тегами, каждый пост откомментирвать два- три раза. Ну и сделать пару подписок
Протестирвать с помощью pytest весь функционал с помощью запросов.
И спользовать модульную архитектуру с минимальной свяностью между модулями
########################################
Создание полноценной системы с моделями, связями, тестами и модульной архитектурой — объемная задача. Ниже я подготовлю пример базовой реализации, которая включает:

- Модели: User, Post, Tag, Comment, Subscription
- Связи между ними
- Вставку тестовых данных
- Простейшие тесты с pytest

Этот пример демонстрирует основной подход и архитектуру, которую далее можно расширять.

---

## 1. Структура проекта (пример)

```
my_blog/
│
├── models/
│   ├── __init__.py
│   ├── base.py
│   ├── user.py
│   ├── post.py
│   ├── tag.py
│   ├── comment.py
│   ├── subscription.py
│
├── database.py
├── seed.py
├── test/
│   ├── test_main.py
│
└── requirements.txt
```

---

## 2. Установка зависимостей

```bash
pip install sqlalchemy pytest
```

---

## 3. Код модулей

### `models/base.py` — базовая декларация

```python
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()
```

---

### `models/user.py`

```python
from sqlalchemy import Column, Integer, String
from .base import Base

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True, nullable=False)
    email = Column(String, unique=True, nullable=False)

    # Связи (будут добавлены в основном файле)
```

---

### `models/post.py`

```python
from sqlalchemy import Column, Integer, String, Text, ForeignKey, Table
from sqlalchemy.orm import relationship
from .base import Base

# Таблица для связи постов и тегов (многие-ко-многим)
post_tags = Table(
    'post_tags', Base.metadata,
    Column('post_id', Integer, ForeignKey('posts.id'), primary_key=True),
    Column('tag_id', Integer, ForeignKey('tags.id'), primary_key=True)
)

class Post(Base):
    __tablename__ = 'posts'

    id = Column(Integer, primary_key=True)
    title = Column(String, nullable=False)
    content = Column(Text)
    user_id = Column(Integer, ForeignKey('users.id'))

    author = relationship('User', back_populates='posts')
    comments = relationship('Comment', back_populates='post', cascade='all, delete-orphan')
    tags = relationship('Tag', secondary=post_tags, back_populates='posts')
```

---

### `models/tag.py`

```python
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from .base import Base

class Tag(Base):
    __tablename__ = 'tags'

    id = Column(Integer, primary_key=True)
    name = Column(String, unique=True, nullable=False)

    posts = relationship('Post', secondary='post_tags', back_populates='tags')
```

---

### `models/comment.py`

```python
from sqlalchemy import Column, Integer, Text, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class Comment(Base):
    __tablename__ = 'comments'

    id = Column(Integer, primary_key=True)
    content = Column(Text)
    user_id = Column(Integer, ForeignKey('users.id'))
    post_id = Column(Integer, ForeignKey('posts.id'))

    user = relationship('User')
    post = relationship('Post', back_populates='comments')
```

---

### `models/subscription.py`

```python
from sqlalchemy import Column, Integer, ForeignKey, UniqueConstraint
from sqlalchemy.orm import relationship
from .base import Base

class Subscription(Base):
    __tablename__ = 'subscriptions'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    post_id = Column(Integer, ForeignKey('posts.id'))

    user = relationship('User', back_populates='subscriptions')
    post = relationship('Post', back_populates='subscribers')

    __table_args__ = (UniqueConstraint('user_id', 'post_id', name='uix_user_post'),)
```

---

## 4. Основной файл с сессией и инициализацией — `database.py`

```python
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models.base import Base

engine = create_engine('sqlite:///:memory:', echo=False)
Session = sessionmaker(bind=engine)

def init_db():
    Base.metadata.create_all(engine)
```

---

## 5. Ввод тестовых данных — `seed.py`

```python
from database import init_db, Session
from models.user import User
from models.post import Post
from models.tag import Tag
from models.comment import Comment
from models.subscription import Subscription

def seed():
    init_db()
    session = Session()

    # Создаем пользователей
    users = [
        User(username='alice', email='alice@example.com'),
        User(username='bob', email='bob@example.com'),
        User(username='carol', email='carol@example.com')
    ]
    session.add_all(users)
    session.commit()

    # Создаем теги
    tags = [Tag(name='комнатные растения'), Tag(name='цветы'), Tag(name='уход')]
    session.add_all(tags)
    session.commit()

    # Создаем посты
    posts = [
        Post(title='Лучшие комнатные цветы', content='Описание комнатных цветов...', author=users[0], tags=[tags[0], tags[1]]),
        Post(title='Уход за фикусом', content='Советы по уходу за фикусом...', author=users[1], tags=[tags[2], tags[0]]),
        Post(title='Цветущие растения', content='Какие выбрать цветущие растения...', author=users[2], tags=[tags[1]])
    ]
    session.add_all(posts)
    session.commit()

    # Комментарии к постам
    comments = [
        Comment(content='Отличная статья!', user=users[1], post=posts[0]),
        Comment(content='Спасибо, очень полезно.', user=users[2], post=posts[0]),
        Comment(content='А как ухаживать зимой?', user=users[0], post=posts[1]),
        Comment(content='Подробный гайд!', user=users[2], post=posts[1]),
        Comment(content='Мои цветы цвели!', user=users[0], post=posts[2]),
        Comment(content='Интересно, спасибо!', user=users[1], post=posts[2])
    ]
    session.add_all(comments)

    # Подписки
    subs = [
        Subscription(user=users[0], post=posts[1]),
        Subscription(user=users[1], post=posts[2]),
        Subscription(user=users[2], post=posts[0])
    ]
    session.add_all(subs)

    session.commit()
    session.close()

if __name__ == '__main__':
    seed()
```

---

## 6. Тесты — `test/test_main.py`

```python
import pytest
from database import init_db, Session
from models.user import User
from models.post import Post
from models.tag import Tag
from models.comment import Comment
from models.subscription import Subscription

@pytest.fixture(scope='module')
def setup_db():
    init_db()
    seed()
    yield
    # Можно добавить очистку, если необходимо

def seed():
    # скопировать содержимое seed.py сюда или импортировать
    from seed import seed as seed_func
    seed_func()

def test_users_count(setup_db):
    session = Session()
    users = session.query(User).all()
    assert len(users) == 3
    session.close()

def test_posts_tags_comments(setup_db):
    session = Session()
    post = session.query(Post).filter_by(title='Лучшие комнатные цветы').one()
    assert len(post.tags) >= 1
    assert len(post.comments) >= 1
    # Проверка что комментарии принадлежат правильному посту
    for c in post.comments:
        assert c.post_id == post.id
    session.close()

def test_subscriptions(setup_db):
    session = Session()
    subs = session.query(Subscription).all()
    assert len(subs) >= 3
    # Проверка что подписки уникальны
    user_post_pairs = {(sub.user_id, sub.post_id) for sub in subs}
    assert len(user_post_pairs) == len(subs)
    session.close()
```

---

## 7. Запуск

1. Установить зависимости: `pip install sqlalchemy pytest`
2. Создать структуру каталогов и файлы по описанию
3. Запустить `seed.py` для заполнения данными
4. Запустить тесты: `pytest`

---

## Итог

Этот пример показывает основную архитектуру, моделирование связей, вставку данных и тестирование с помощью pytest. В реальном проекте можно добавить:

- разделение конфигураций
- обработку ошибок
- более сложные связи и методы
- интеграцию с веб-фреймворками

Если нужно расширение или конкретные детали, — пишите!